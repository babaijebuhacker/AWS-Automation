# Automating EC2 Start/Stop Using AWS Lambda and Tags

This guide explains how to create and configure two AWS Lambda functions to automatically start and stop EC2 instances in all regions using tags. This setup uses IAM roles and AWS EventBridge for scheduling.

## Prerequisites
1. **AWS Account** with permissions to manage EC2, Lambda, and IAM resources.
2. **AWS CLI** or Management Console for setup.
3. Basic knowledge of Python and AWS Lambda.

---

## Step 1: Create IAM Role for Lambda

1. Open the [IAM Management Console](https://console.aws.amazon.com/iam/).
2. Create a new role:
   - **Role Type**: AWS service
   - **Use case**: Lambda.
3. Attach the following policy to allow Lambda to interact with EC2:
   ```json
   {
       "Version": "2012-10-17",
       "Statement": [
           {
               "Effect": "Allow",
               "Action": [
                   "ec2:DescribeInstances",
                   "ec2:StartInstances",
                   "ec2:StopInstances"
               ],
               "Resource": "*"
           }
       ]
   }
   ```
4. Name the role (e.g., `Lambda_EC2_StartStopRole`) and complete the creation process.

---

## Step 2: Create the Lambda Function for Stopping EC2 Instances

1. Open the [AWS Lambda Console](https://console.aws.amazon.com/lambda/).
2. Create a new function:
   - **Name**: StopEC2Instances
   - **Runtime**: Python 3.x.
   - **Role**: Select the IAM role created earlier.
3. Paste the following code into the Lambda function editor:

```python
import boto3

# Define the regions to check
regions = ['us-east-1', 'us-west-1', 'us-west-2', 'us-east-2']

def lambda_handler(event, context):
    for region in regions:
        print(f'Checking region: {region}')
        ec2 = boto3.client('ec2', region_name=region)
        
        # Filter to find instances with the Autostop tag set to true and in a running state
        response = ec2.describe_instances(
            Filters=[
                {'Name': 'tag:Autostop', 'Values': ['true']},
                {'Name': 'instance-state-name', 'Values': ['running']}
            ]
        )
        
        # Extract instance IDs
        instances_to_stop = []
        for reservation in response['Reservations']:
            for instance in reservation['Instances']:
                instances_to_stop.append(instance['InstanceId'])

        if instances_to_stop:
            # Stop instances
            ec2.stop_instances(InstanceIds=instances_to_stop)
            print(f'Stopped instances in {region}: {instances_to_stop}')
        else:
            print(f'No running instances with Autostop tag set to true were found in {region}.')
```

4. Save the function.

---

## Step 3: Create the Lambda Function for Starting EC2 Instances

1. Create another Lambda function:
   - **Name**: StartEC2Instances
   - **Runtime**: Python 3.x.
   - **Role**: Use the same IAM role created earlier.
2. Paste the following code into the Lambda function editor:

```python
import boto3

# Define the regions to check
regions = ['us-east-1', 'us-west-1', 'us-west-2', 'us-east-2']

def lambda_handler(event, context):
    for region in regions:
        print(f'Checking region: {region}')
        ec2 = boto3.client('ec2', region_name=region)
        
        # Filter to find instances with the Autostart tag set to true and in a stopped state
        response = ec2.describe_instances(
            Filters=[
                {'Name': 'tag:Autostart', 'Values': ['true']},
                {'Name': 'instance-state-name', 'Values': ['stopped']}
            ]
        )
        
        # Extract instance IDs
        instances_to_start = []
        for reservation in response['Reservations']:
            for instance in reservation['Instances']:
                instances_to_start.append(instance['InstanceId'])

        if instances_to_start:
            # Start instances
            ec2.start_instances(InstanceIds=instances_to_start)
            print(f'Started instances in {region}: {instances_to_start}')
        else:
            print(f'No stopped instances with Autostart tag set to true were found in {region}.')
```

3. Save the function.

---

## Step 4: Configure EventBridge to Trigger the Lambda Functions

1. Open the [EventBridge Console](https://console.aws.amazon.com/events/).
2. Create a rule to trigger the **StopEC2Instances** Lambda:
   - **Name**: StopEC2InstancesRule
   - **Event Source**: Schedule.
   - **Schedule Expression**: Set a cron expression to run at a specific time (e.g., `cron(0 1 * * ? *)` to run at 1 AM UTC).
   - **Target**: Select the StopEC2Instances Lambda function.

3. Create another rule to trigger the **StartEC2Instances** Lambda:
   - **Name**: StartEC2InstancesRule
   - **Event Source**: Schedule.
   - **Schedule Expression**: Set a cron expression to run at a specific time (e.g., `cron(0 7 * * ? *)` to run at 7 AM UTC).
   - **Target**: Select the StartEC2Instances Lambda function.

---

## Step 5: Tag EC2 Instances

1. Open the [EC2 Console](https://console.aws.amazon.com/ec2/).
2. Select the instances you want to manage with these Lambda functions.
3. Add the following tags to the instances:
   - **Key**: `Autostop`
     - **Value**: `true` (for instances to stop automatically).
   - **Key**: `Autostart`
     - **Value**: `true` (for instances to start automatically).

---

## Testing
1. Manually invoke the Lambda functions from the AWS Lambda Console.
2. Check the logs in **CloudWatch Logs** to verify the functions' output.
3. Confirm the instances' states in the EC2 Console.

---

## Sharing With the Community
Feel free to fork this documentation, enhance it, and share it with your peers. You can publish the Lambda function code and this guide on GitHub to help others automate EC2 instance management. Here's an example GitHub repository structure:

```
.
├── README.md
├── start_ec2_lambda.py
├── stop_ec2_lambda.py
├── iam_policy.json
└── eventbridge_rules.md
```

Add a `README.md` file explaining the purpose of the repository and how to deploy the functions. Share the repository link with your community!

